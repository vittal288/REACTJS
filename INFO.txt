ReactJS: To create basic skeleton and creating a components 
React DOM: rendering the react components to real DOM

Babel: PreCompile JS framework : compiles down JSX to nextGen JS code to native browser JS code 

WHY React ?
1. Easy to maintain UI state 
2. Frameworks yeilds to write better code with JSX 
3. Biig community/ Eco system support for complext problem statements 


 @@@@ ES6 and ES7 Features @@@@
1. Classes, Inheritance 
2. Method and functions 
3. Arrowed functions 
4. Spread ... : used to split up the array elements or object properties  
5. Destructuring 
6. Reference Type and Premitive type 

######
const oldArray =[1,2,3];
const newArray =[...oldArray,4,5]
console.log(newArray); 
o/p-->[1, 2, 3, 4, 5]
-----------------------------------------
const oldObject = {'fName':'Vittal'};
const newObj = {...oldObject,'lName':'kamkar'}
o/p --> {
  fName: "Vittal",
  lName: "kamkar"
}
##########
5. Rest Operators:  merges  all function arguments into an array and we can perform all array methods on arguments 
function(...args){
    return args.length;
}

console.log(filter(1,2,4,5));
o/p --> 4

#######
Destructuring: this Operator will pull out each array items or object keys and assigned to each variable 
Array Destructuring: 
[a,b] = [1,2,3,4];
console.log(a); --> 1
console.log(b); --> 2

Object Destructuring:
{name} = {name:'Vittal',age:28}
console.log(name) --> vittal
console.log(age) --> undefined 

##### Reference type and Premitive type 
Premitive type:
const number =1;
const num2 = number;
console.log(num2) ---> 1
==>here creates a copy of number and assigned to num2 so called Premitive type , its keeps the copy of variable

Reference Type: (objects and arrrays  and Reference types)
const person ={name:'vittal'};
const person2 = person;
console.log(person2) -->{name:'vittal'}

if assigned different value to name to person object then see the output 
person.name ='Sandy';
console.log(person2); --> {name:'Sandy '} but if it is copied from person to person2 then output should be {name:'vittal'} but here it is not copied instead 
it is stored it Reference(using pointer concept) so could not able to get the expected output.

But how to copy the object and array : solution is use spread Operator as shown below 
const person1 ={'name':'Vittal'};
const person2 ={
    ...person1
}
person1.name ='Vittal';
console.log(person1) --> {'name':'Vittal'};


@@@@@@@@@@@@@@@@@@@@ REACTJS @@@@@@@@@@@@@@@@@@@@@
--> create react app npm tool like ng cli to create react application 

Course Name: JSX Restrictions


